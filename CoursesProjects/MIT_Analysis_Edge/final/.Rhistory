clear
rm(list=ls())
dir()
Auto = read.csv("Auto.csv")
summary(Auto)
dim(Auto)
Auto = na.omit(Auto)
dim(Auto)
range(Auto[,1])
sapply(Auto[,1:7],range)
sapply(Auto[,1:3],range)
newAuto = Auto[-(10:85),]
dim(newAuto) == dim(Auto) - c(76,0)
library(Boston)
library(MASS)
Boston
par(mfrow=c(1,3))
hist(Boston$crim[Boston$crim>1], breaks=25)
# most cities have low crime rates, but there is a long tail: 18 suburbs appear
# to have a crime rate > 20, reaching to above 80
hist(Boston$tax, breaks=25)
# there is a large divide between suburbs with low tax rates and a peak at 660-680
hist(Boston$ptratio, breaks=25)
# a skew towards high ratios, but no particularly high ratios
names(Boston)
Boston$chas
t(subset(Boston, medv == min(Boston$medv)))
subset(Boston, medv == min(Boston$medv))
> t(subset(Boston, medv == min(Boston$medv)))
install.packages('ISLR')
library(MASS)
library(ISLR)
Boston
?Boston
names(Boston)
fix(Boston)
View(Boston)
View(Boston)
lm.fit = lm(medv~lstat,data=Boston)
View(Boston)
summary(lm.fit)
coef(lm.fit)
names(lm.fit)
type(lm.fit)
?confint
confint(lm.fit)
plot(lstat,medv)
plot(lstat,medv,data=Boston)
plot(Boston$lstat,Boston$medv)
?abline
abline(lm.fit)
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,col="red")
plot(Boston$lstat,Boston$medv,col='red')
plot(lstat,medv,pch=20)
plot(Boston$lstat,Boston$medv,pch=20)
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues (lm.fit))
LS
ls
ls()
rm(ls=ls())
rm(ls())
lm.fit=lm(medv∼lstat+age,data=Boston)
rm(lm.fit)
lm.fit=lm(medv∼lstat+age,data=Boston)
lm.fit=lm(medv∼lstat+age,data=Boston)
lm.fit = lm(medv~lstat+age,data=Boston)
lm.fit
plot(lm.fit)
summary()lm.fit
summary(lm.fit)
?summary.lm
summary(lm.fit)$r.sq
summary(lm.fit)$sig
library(car)
install.packages('car')
par(mfrom=c(2,2))
par(mfrow=c(2,2))
plot(lm.fit)
?plot.lm
print('sas')
loadf
loadf = function(){
library(MASS)
print('library has been loaded')
}
loadf
loadf()
---
```{r}
```{r}
```{r}
demo()
demo(Japanese)
demo(lm.glm)
iris
data(iris)
str(iris)
split(iris,iris$Species)
class(split(iris,iris$Species))
lapply(split(iris,iris$Species),lapply,mean)
apply(iris[,1:4],2,mean)
class(apply(iris[,1:4],2,mean))
rowMeans(iris[,1:4])
apply(iris,2,mean)
data(mtcars)
str(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
82.63636-209.21429
debug(ls)
ls()
a
sad
debug(ls)
ls()
getwd()
setwd("./Downloads/")
getwd()
dir()
Movies = read.csv("Movies.csv")
str(Movies)
head(Movies)
train = subset(Movies,Year<2010)
test  = subset(Movies,Year>=2010)
model1 = lm(Worldwide~.-Name-Year,data=train[,3:ncol(train)])
names(train)
model1 = lm(Worldwide~. -Name -Year,data=train[,3:ncol(train)])
model1 = lm(Worldwide~. -Crime,data=train[,3:ncol(train)])
model1
names(train)
model1$coefficients
length(model1$coefficients)
str(train)
model1 = lm(Worldwide~.,data=train[,3:ncol(train)])
model1
smuuary(model1)
summary(model1)
cor(train$Worldwide,train$Production.Budget)
model2 = lm(Worldwide~Runtime+Crime+Horror+Animation+History+
Nominations+Production.Budget)
Nominations+Production.Budget,data=train)
model2 = lm(Worldwide~Runtime+Crime+Horror+Animation+History+Nominations+Production.Budget,data=train)
summary(model2)
p1 = predict(model2,newdata = test)
sse = sum((p1-test$Worldwide)^2)
sse
sst = sum((mean(train$Worldwide)-test$Worldwide)^2)
sst
r2 = 1-sse/sst
r2
Movies$Performance = factor(ifelse(Movies$Worldwide>quantile(Movies$Worldwide,.75),"Excellent",
ifelse(Movies$Worldwide>quantile(Movies$Worldwide,.25),
"Average","Poor")))
table(Movies$Performance)
Movies$Worldwide = NULL
library(caTools)
split = sample.split(Movies$Performance,SplitRatio = .7)
set.seed(15071)
split = sample.split(Movies$Performance,SplitRatio = .7)
train = subset(Movies,split==TRUE)
test  = subset(Movies,split==FALSE)
library(rpart)
library(rpart.plot)
model3 = rpart(Performance~.,data=train[,3:ncol(train)])
model3
summmary(model3)
summary(model3)
plot(model3)
text(model3)
plot(model3)
text(model3)
mean(train$Performance==predict(model3,newdata = train))
predict(model3,newdata = train)
mean(train$Performance==predict(model3,newdata = train,type="response"))
mean(train$Performance==predict(model3,newdata = train,type="class"))
predict(model3,newdata = train,type="class")
mean(train$Performance==predict(model3,newdata = train,type="class"))
mean(train$Performance=="Average")
mean(test$Performance==predict(model3,newdata = test,type="class"))
mean(test$Performance=="Average")
rm(list=ls())
setwd("/Users/yangguangyao/Documents/GitHub_Project/MoocCourses/Analysis_Edge/final")
d = read.csv("")
d = read.csv("federalFundsRate.csv")
table(d$Chairman)
set.seed(201)
spl = sample.split(d$RaisedFedFunds,0.7)
train = subset(d,spl==TRUE)
test  = subset(d,spl==FALSE)
names(train)
model1 = glm(RaisedFedFunds~PreviousRate+Streak+Unemployment+
HomeownershipRate+DemocraticPres+MonthsUntilElection ,data=train)
model1 = glm(RaisedFedFunds~PreviousRate+Streak+Unemployment+
HomeownershipRate+DemocraticPres+MonthsUntilElection ,data=train,
family=binomial)
model1
summary(model1)
test1 = test[1,]
test1
fix(test1)
head(test)
fix(test1)
predict(model1,newdata = test1,type="response")
summary(model1)
p1 = predict(model1,newdata = test,type="response") > .5
table(train$RaisedFedFunds)
table(p1)
library(ROCR)
ROCRpred = prediction(predict(model1,newdata = test,type="response"), test$RaisedFedFunds)
as.numeric(performance(ROCRpred, "auc")@y.values)
set.seed(201)
(0:50)*0.001
names(train)
library(caret)
library(e1071)
tr.control = trainControl(method = "cv", number = 10)
cp.grid = expand.grid( .cp = (1:50)*0.001)
set.seed(201)
tr = train(RaisedFedFunds~PreviousRate+Streak+Unemployment+
HomeownershipRate+DemocraticPres+MonthsUntilElection,
data = train,
method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
tr
set.seed(201)
tr.control = trainControl(method = "cv", number = 10)
set.seed(201)
tr = train(RaisedFedFunds~PreviousRate+Streak+Unemployment+
HomeownershipRate+DemocraticPres+MonthsUntilElection,
data = train,
method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
# Extract tree
tr
best.tree = rpart(RaisedFedFunds~PreviousRate+Streak+Unemployment+
HomeownershipRate+DemocraticPres+MonthsUntilElection,
data = train, cp=0.016)
prp(best.tree)
p1 = predict(best.tree ,newdata = test1,type="response") > .5
p2 = predict(best.tree ,newdata = test1)
p2
table(test$RaisedFedFunds,predict(best.tree ,newdata = test)>.5)
(79+36)/175
rm(list=ls())
d = read.csv("Households.csv")
head(d)
d$MorningPct[order(d$MorningPct)]
which(d$AfternoonPct==100)
length(which(d$AfternoonPct==100))
names(d)
min(subset(d,AvgSalesValue>150)$AvgDiscount)
head(d)
min(subset(d,AvgDiscount>25)$AvgSalesValue)
sum(d$NumVisits >= 300)
mean(d$NumVisits >= 300)
summary(d)
library(caret)
preproc = preProcess(d)
d_norm = predict(preproc,d)
d_norm2 = scale(d)
d_norm
head(d_norm)
head(d_norm2)
class(d_norm2)
names(d_norm2)
colnames(d_norm2)
d_norm2$NumVisits
max(d_norm$NumVisits)
min(d_norm$AfternoonPct)
set.seed(200)
set.seed(200)
distances = dist(d_norm,method="euclidean")
ClusterShoppers = hclust(distances,method="ward.D")
plot(ClusterShoppers,labels=FALSE)
rect.hclust(ClusterShoppers, k = 10, border = "red")
flowerClusters = cutree(ClusterShoppers, k = 10)
flowerClusters
Clusters = cutree(ClusterShoppers, k = 10)
table(Clusters)
table(Clusters)(order(table(Clusters)))
table(Clusters)[order(table(Clusters))]
k = 10
set.seed(200)
KMC = kmeans(d_norm, centers = k)
str(KMC)
KMC$cluster
table(KMC$cluster)
table(KMC$cluster)[order(table(KMC$cluster))]
class(KMC)
names(KMC)
names(d)
d[KMC$cluster==1]$MorningPct
d[KMC$cluster==1,]$MorningPct
mean(d[KMC$cluster==1,]$MorningPct)
mean(d[KMC$cluster==2,]$MorningPct)
mean(d[KMC$cluster==3,]$MorningPct)
mean(d[KMC$cluster==4,]$MorningPct)
mean(d[KMC$cluster==5,]$MorningPct)
mean(d[KMC$cluster==6,]$MorningPct)
mean(d[KMC$cluster==7,]$MorningPct)
mean(d[KMC$cluster==8,]$MorningPct)
mean(d[KMC$cluster==9,]$MorningPct)
mean(d[KMC$cluster==10,]$MorningPct)
KMC$centers
tapply(d$MorningPct,KMC$cluster,mean)
k = 5
set.seed(5000)
KMC = kmeans(d_norm, centers = k)
table(KMC$cluster)
KMC$centers
